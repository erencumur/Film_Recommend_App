// <auto-generated />
using EntityFrameworkCore.Jet.Metadata;
using FilmRecommend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmRecommendForm.Data.Migrations
{
    [DbContext(typeof(FilmMoodDBContext))]
    [Migration("20241026131438_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FilmRecommend.Entities.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.Property<string>("LeadingActor")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.Property<int>("MovieSubCategoryID")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("integer");

                    b.HasKey("MovieID");

                    b.HasIndex("MovieSubCategoryID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("FilmRecommend.Entities.MovieCategory", b =>
                {
                    b.Property<int>("MovieCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.HasKey("MovieCategoryID");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("FilmRecommend.Entities.MovieSubCategory", b =>
                {
                    b.Property<int>("MovieSubCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Jet:ValueGenerationStrategy", JetValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieCategoryID")
                        .HasColumnType("integer");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("longchar");

                    b.HasKey("MovieSubCategoryID");

                    b.HasIndex("MovieCategoryID");

                    b.ToTable("MovieSubCategories");
                });

            modelBuilder.Entity("FilmRecommend.Entities.Movie", b =>
                {
                    b.HasOne("FilmRecommend.Entities.MovieSubCategory", "SubCategory")
                        .WithMany("Movies")
                        .HasForeignKey("MovieSubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FilmRecommend.Entities.MovieSubCategory", b =>
                {
                    b.HasOne("FilmRecommend.Entities.MovieCategory", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("MovieCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FilmRecommend.Entities.MovieCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("FilmRecommend.Entities.MovieSubCategory", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
